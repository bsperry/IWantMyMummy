// <auto-generated />
using System;
using IWantMyMummy.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IWantMyMummy.Migrations.Mummy
{
    [DbContext(typeof(MummyContext))]
    partial class MummyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IWantMyMummy.Models.Burial", b =>
                {
                    b.Property<int>("BurialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("burial_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgeAtDeath")
                        .HasColumnName("age_at_death")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("AgeMethodSkull")
                        .HasColumnName("age_method_skull")
                        .HasColumnType("bit");

                    b.Property<bool?>("ArtifactFound")
                        .HasColumnName("artifact_found")
                        .HasColumnType("bit");

                    b.Property<string>("ArtifactsDescription")
                        .HasColumnName("artifacts_description")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<bool?>("BasilarSuture")
                        .HasColumnName("basilar_suture")
                        .HasColumnType("bit");

                    b.Property<double?>("BasionBregmaHeight")
                        .HasColumnName("basion_bregma_height")
                        .HasColumnType("float");

                    b.Property<double?>("BasionNasion")
                        .HasColumnName("basion_nasion")
                        .HasColumnType("float");

                    b.Property<double?>("BasionProsthionLength")
                        .HasColumnName("basion_prosthion_length")
                        .HasColumnType("float");

                    b.Property<double?>("BizygomaticDiameter")
                        .HasColumnName("bizygomatic_diameter")
                        .HasColumnType("float");

                    b.Property<bool?>("BoneTaken")
                        .HasColumnName("bone_taken")
                        .HasColumnType("bit");

                    b.Property<bool?>("BurialAdult")
                        .HasColumnName("burial_adult")
                        .HasColumnType("bit");

                    b.Property<int>("BurialDepth")
                        .HasColumnName("burial_depth")
                        .HasColumnType("int");

                    b.Property<int>("BurialNumber")
                        .HasColumnName("burial_number")
                        .HasColumnType("int");

                    b.Property<string>("BurialSituation")
                        .HasColumnName("burial_situation")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("BurialSquareId")
                        .HasColumnName("burial_square_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("BurialWrapping")
                        .IsRequired()
                        .HasColumnName("burial_wrapping")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("BurialWrappingMaterial")
                        .HasColumnName("burial_wrapping_material")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CranialSuture")
                        .HasColumnName("cranial_suture")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateFound")
                        .HasColumnName("date_found")
                        .HasColumnType("datetime");

                    b.Property<string>("DescriptionOfTaken")
                        .HasColumnName("description_of_taken")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("DorsalPitting")
                        .HasColumnName("dorsal_pitting")
                        .HasColumnType("int");

                    b.Property<bool?>("EpiphysealUnion")
                        .HasColumnName("epiphyseal_union")
                        .HasColumnType("bit");

                    b.Property<double?>("EstimateAge")
                        .HasColumnName("estimate_age")
                        .HasColumnType("float");

                    b.Property<double?>("EstimateLivingStature")
                        .HasColumnName("estimate_living_stature")
                        .HasColumnType("float");

                    b.Property<double?>("FemurHead")
                        .HasColumnName("femur_head")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnName("femur_length")
                        .HasColumnType("float");

                    b.Property<double?>("ForemanMagnum")
                        .HasColumnName("foreman_magnum")
                        .HasColumnType("float");

                    b.Property<double?>("GeFunctionTotal")
                        .HasColumnName("GE_function_total")
                        .HasColumnType("float");

                    b.Property<string>("GenderBodyCol")
                        .HasColumnName("gender_body_col")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("GenderGe")
                        .IsRequired()
                        .HasColumnName("gender_GE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Gonian")
                        .HasColumnName("gonian")
                        .HasColumnType("int");

                    b.Property<string>("HairColor")
                        .HasColumnName("hair_color")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool?>("HairTaken")
                        .HasColumnName("hair_taken")
                        .HasColumnType("bit");

                    b.Property<string>("HeadDirection")
                        .HasColumnName("head_direction")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("HumerusHead")
                        .HasColumnName("humerus_head")
                        .HasColumnType("float");

                    b.Property<double?>("HumerusLength")
                        .HasColumnName("humerus_length")
                        .HasColumnType("float");

                    b.Property<double?>("InterorbitalBreadth")
                        .HasColumnName("interorbital_breadth")
                        .HasColumnType("float");

                    b.Property<int>("LengthOfRemains")
                        .HasColumnName("length_of_remains")
                        .HasColumnType("int");

                    b.Property<double?>("MaximumCranialBreadth")
                        .HasColumnName("maximum_cranial_breadth")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumCranialLength")
                        .HasColumnName("maximum_cranial_length")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumNasalBreadth")
                        .HasColumnName("maximum_nasal_breadth")
                        .HasColumnType("float");

                    b.Property<int?>("MedialIpRamus")
                        .HasColumnName("medial_IP_ramus")
                        .HasColumnType("int");

                    b.Property<double?>("NasionProsthion")
                        .HasColumnName("nasion_prosthion")
                        .HasColumnType("float");

                    b.Property<int?>("NuchalCrest")
                        .HasColumnName("nuchal_crest")
                        .HasColumnType("int");

                    b.Property<int?>("OrbitEdge")
                        .HasColumnName("orbit_edge")
                        .HasColumnType("int");

                    b.Property<int?>("Osteophytosis")
                        .HasColumnName("osteophytosis")
                        .HasColumnType("int");

                    b.Property<int?>("ParietalBossing")
                        .HasColumnName("parietal_bossing")
                        .HasColumnType("int");

                    b.Property<string>("PathologyAnomalies")
                        .HasColumnName("pathology_anomalies")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("PreaurSulcus")
                        .HasColumnName("preaur_sulcus")
                        .HasColumnType("int");

                    b.Property<int?>("PreservationIndex")
                        .HasColumnName("preservation_index")
                        .HasColumnType("int");

                    b.Property<int?>("PubicBone")
                        .HasColumnName("pubic_bone")
                        .HasColumnType("int");

                    b.Property<int?>("PubicSymphysis")
                        .HasColumnName("pubic_symphysis")
                        .HasColumnType("int");

                    b.Property<int?>("Robust")
                        .HasColumnName("robust")
                        .HasColumnType("int");

                    b.Property<int>("SampleNumber")
                        .HasColumnName("sample_number")
                        .HasColumnType("int");

                    b.Property<int?>("SciaticNotch")
                        .HasColumnName("sciatic_notch")
                        .HasColumnType("int");

                    b.Property<bool>("SexMethodSkull")
                        .HasColumnName("sex_method_skull")
                        .HasColumnType("bit");

                    b.Property<bool?>("SoftTissueTaken")
                        .HasColumnName("soft_tissue_taken")
                        .HasColumnType("bit");

                    b.Property<int>("SouthToFeet")
                        .HasColumnName("south_to_feet")
                        .HasColumnType("int");

                    b.Property<int>("SouthToHead")
                        .HasColumnName("south_to_head")
                        .HasColumnType("int");

                    b.Property<int?>("SubpubicAngle")
                        .HasColumnName("subpubic_angle")
                        .HasColumnType("int");

                    b.Property<int?>("SupraorbitalRidges")
                        .HasColumnName("supraorbital_ridges")
                        .HasColumnType("int");

                    b.Property<bool?>("TextileTaken")
                        .HasColumnName("textile_taken")
                        .HasColumnType("bit");

                    b.Property<double?>("TibiaLength")
                        .HasColumnName("tibia_length")
                        .HasColumnType("float");

                    b.Property<int?>("ToothAttrition")
                        .HasColumnName("tooth_attrition")
                        .HasColumnType("int");

                    b.Property<string>("ToothEruption")
                        .HasColumnName("tooth_eruption")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<bool?>("ToothTaken")
                        .HasColumnName("tooth_taken")
                        .HasColumnType("bit");

                    b.Property<int?>("VentralArc")
                        .HasColumnName("ventral_arc")
                        .HasColumnType("int");

                    b.Property<int>("WestToFeet")
                        .HasColumnName("west_to_feet")
                        .HasColumnType("int");

                    b.Property<int>("WestToHead")
                        .HasColumnName("west_to_head")
                        .HasColumnType("int");

                    b.Property<int?>("ZygomaticCrest")
                        .HasColumnName("zygomatic_crest")
                        .HasColumnType("int");

                    b.HasKey("BurialId");

                    b.HasIndex("BurialSquareId");

                    b.HasIndex("BurialSubplot", "BurialSquareId");

                    b.ToTable("Burial");
                });

            modelBuilder.Entity("IWantMyMummy.Models.BurialQuadrant", b =>
                {
                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("BurialSquareId")
                        .HasColumnName("burial_square_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("BurialSubplot", "BurialSquareId")
                        .HasName("PK_QUADRANT");

                    b.ToTable("Burial_Quadrant");
                });

            modelBuilder.Entity("IWantMyMummy.Models.BurialSquare", b =>
                {
                    b.Property<string>("BurialSquareId")
                        .HasColumnName("burial_square_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialLocationEw")
                        .IsRequired()
                        .HasColumnName("burial_location_EW")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("BurialLocationNs")
                        .IsRequired()
                        .HasColumnName("burial_location_NS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("HighPairEw")
                        .HasColumnName("high_pair_EW")
                        .HasColumnType("int");

                    b.Property<int>("HighPairNs")
                        .HasColumnName("high_pair_NS")
                        .HasColumnType("int");

                    b.Property<int>("LowPairEw")
                        .HasColumnName("low_pair_EW")
                        .HasColumnType("int");

                    b.Property<int>("LowPairNs")
                        .HasColumnName("low_pair_NS")
                        .HasColumnType("int");

                    b.HasKey("BurialSquareId");

                    b.ToTable("Burial_Square");
                });

            modelBuilder.Entity("IWantMyMummy.Models.CranialSample", b =>
                {
                    b.Property<int>("CranialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cranial_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BasionBregmaHeight")
                        .HasColumnName("basion_bregma_height")
                        .HasColumnType("float");

                    b.Property<double>("BasionNasion")
                        .HasColumnName("basion_nasion")
                        .HasColumnType("float");

                    b.Property<double>("BasionProsthionLength")
                        .HasColumnName("basion_prosthion_length")
                        .HasColumnType("float");

                    b.Property<double>("BizgomaticDiameter")
                        .HasColumnName("bizgomatic_diameter")
                        .HasColumnType("float");

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<double>("InterobitalBreadth")
                        .HasColumnName("interobital_breadth")
                        .HasColumnType("float");

                    b.Property<double>("MaxCranialBreadth")
                        .HasColumnName("max_cranial_breadth")
                        .HasColumnType("float");

                    b.Property<double>("MaxCranialLength")
                        .HasColumnName("max_cranial_length")
                        .HasColumnType("float");

                    b.Property<double>("MaxNasalBreadth")
                        .HasColumnName("max_nasal_breadth")
                        .HasColumnType("float");

                    b.Property<double>("NasionProsthion")
                        .HasColumnName("nasion_prosthion")
                        .HasColumnType("float");

                    b.Property<string>("RackNumber")
                        .HasColumnName("rack_number")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("RackShelf")
                        .HasColumnName("rack_shelf")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("SampleNumber")
                        .HasColumnName("sample_number")
                        .HasColumnType("int");

                    b.HasKey("CranialId")
                        .HasName("PK__Cranial___88D8C19A8797E05D");

                    b.HasIndex("BurialId");

                    b.HasIndex("RackShelf", "RackNumber");

                    b.ToTable("Cranial_Sample");
                });

            modelBuilder.Entity("IWantMyMummy.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("image_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("BurialSquareId")
                        .HasColumnName("burial_square_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("CranialId")
                        .HasColumnName("cranial_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image1")
                        .HasColumnName("image")
                        .HasColumnType("image");

                    b.Property<string>("ImageDescription")
                        .HasColumnName("image_description")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.HasKey("ImageId");

                    b.HasIndex("BurialId");

                    b.HasIndex("BurialSquareId");

                    b.HasIndex("CranialId");

                    b.HasIndex("BurialSubplot", "BurialSquareId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("IWantMyMummy.Models.RackSample", b =>
                {
                    b.Property<string>("RackShelf")
                        .HasColumnName("rack_shelf")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("RackNumber")
                        .HasColumnName("rack_number")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("int");

                    b.Property<string>("Calibrated95CalendarDateAvg")
                        .HasColumnName("calibrated_95_calendar_date_AVG")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("Calibrated95CalendarDateMax")
                        .HasColumnName("calibrated_95_calendar_date_MAX")
                        .HasColumnType("int");

                    b.Property<int>("Calibrated95CalendarDateMin")
                        .HasColumnName("calibrated_95_calendar_date_MIN")
                        .HasColumnType("int");

                    b.Property<int>("Calibrated95CalendarDateSpan")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("calibrated_95_calendar_date_SPAN")
                        .HasColumnType("int")
                        .HasComputedColumnSql("(abs([calibrated_95_calendar_date_MAX]-[calibrated_95_calendar_date_MIN]))");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Conventional14cAgeBp")
                        .HasColumnName("conventional_14c_age_BP")
                        .HasColumnType("int");

                    b.Property<int>("Foci")
                        .HasColumnName("foci")
                        .HasColumnType("int");

                    b.Property<bool>("IsBag")
                        .HasColumnName("is_bag")
                        .HasColumnType("bit");

                    b.Property<string>("LocationNotes")
                        .HasColumnName("location_notes")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int>("MlSize")
                        .HasColumnName("ml_size")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("Questions")
                        .HasColumnName("questions")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("RankDescription")
                        .HasColumnName("rank_description")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int>("TubeNumber")
                        .HasColumnName("tube_number")
                        .HasColumnType("int");

                    b.Property<int>("_14cCalendarDay")
                        .HasColumnName("14c_calendar_day")
                        .HasColumnType("int");

                    b.HasKey("RackShelf", "RackNumber")
                        .HasName("PK_RACK");

                    b.HasIndex("BurialId");

                    b.ToTable("Rack_Sample");
                });

            modelBuilder.Entity("IWantMyMummy.Models.Burial", b =>
                {
                    b.HasOne("IWantMyMummy.Models.BurialSquare", "BurialSquare")
                        .WithMany("Burial")
                        .HasForeignKey("BurialSquareId")
                        .HasConstraintName("FK__Burial__burial_s__5070F446");

                    b.HasOne("IWantMyMummy.Models.BurialQuadrant", "BurialS")
                        .WithMany("Burial")
                        .HasForeignKey("BurialSubplot", "BurialSquareId")
                        .HasConstraintName("FK_QUADRANT");
                });

            modelBuilder.Entity("IWantMyMummy.Models.CranialSample", b =>
                {
                    b.HasOne("IWantMyMummy.Models.Burial", "Burial")
                        .WithMany("CranialSample")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK_BURIAL2")
                        .IsRequired();

                    b.HasOne("IWantMyMummy.Models.RackSample", "Rack")
                        .WithMany("CranialSample")
                        .HasForeignKey("RackShelf", "RackNumber")
                        .HasConstraintName("FK_RACK");
                });

            modelBuilder.Entity("IWantMyMummy.Models.Image", b =>
                {
                    b.HasOne("IWantMyMummy.Models.Burial", "Burial")
                        .WithMany("Image")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK_BURIAL3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IWantMyMummy.Models.BurialSquare", "BurialSquare")
                        .WithMany("Image")
                        .HasForeignKey("BurialSquareId")
                        .HasConstraintName("FK_SQUARE");

                    b.HasOne("IWantMyMummy.Models.CranialSample", "Cranial")
                        .WithMany("Image")
                        .HasForeignKey("CranialId")
                        .HasConstraintName("FK_CRANIAL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IWantMyMummy.Models.BurialQuadrant", "BurialS")
                        .WithMany("Image")
                        .HasForeignKey("BurialSubplot", "BurialSquareId")
                        .HasConstraintName("FK_QUADRANT2");
                });

            modelBuilder.Entity("IWantMyMummy.Models.RackSample", b =>
                {
                    b.HasOne("IWantMyMummy.Models.Burial", "Burial")
                        .WithMany("RackSample")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("FK_BURIAL")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
